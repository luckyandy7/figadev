{"ast":null,"code":"var _jsxFileName = \"/Users/suhwan/Downloads/figadev/src/Galaxy.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Renderer, Camera, Transform, Geometry, Program, Mesh, Vec3 } from 'ogl';\nimport './Galaxy.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Galaxy = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const renderer = new Renderer({\n      canvas: canvasRef.current,\n      alpha: true\n    });\n    const gl = renderer.gl;\n    const camera = new Camera(gl, {\n      fov: 35\n    });\n    const scene = new Transform();\n\n    // Set canvas size\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    camera.position.set(0, 0, 15);\n    const numParticles = 1000;\n    const positions = new Float32Array(numParticles * 3);\n    const colors = new Float32Array(numParticles * 3);\n\n    // Create galaxy spiral\n    for (let i = 0; i < numParticles; i++) {\n      const i3 = i * 3;\n\n      // Spiral galaxy pattern\n      const radius = Math.random() * 5;\n      const spinAngle = radius * 0.5;\n      const branchAngle = i % 3 * (Math.PI * 2 / 3);\n      const angle = branchAngle + spinAngle;\n      const randomX = (Math.random() - 0.5) * 0.5;\n      const randomY = (Math.random() - 0.5) * 0.5;\n      const randomZ = (Math.random() - 0.5) * 0.5;\n      positions[i3] = Math.cos(angle) * radius + randomX;\n      positions[i3 + 1] = randomY * 0.3;\n      positions[i3 + 2] = Math.sin(angle) * radius + randomZ;\n\n      // Colors - blue to purple gradient\n      const mixedColor = new Vec3();\n      const innerColor = new Vec3(0.2, 0.6, 1.0); // Blue\n      const outerColor = new Vec3(0.8, 0.3, 1.0); // Purple\n\n      mixedColor.lerp(innerColor, outerColor, radius / 5);\n      colors[i3] = mixedColor.x;\n      colors[i3 + 1] = mixedColor.y;\n      colors[i3 + 2] = mixedColor.z;\n    }\n    const geometry = new Geometry(gl, {\n      position: {\n        size: 3,\n        data: positions\n      },\n      color: {\n        size: 3,\n        data: colors\n      }\n    });\n    const vertex = `\n      attribute vec3 position;\n      attribute vec3 color;\n\n      uniform mat4 modelViewMatrix;\n      uniform mat4 projectionMatrix;\n\n      varying vec3 vColor;\n\n      void main() {\n        vColor = color;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        gl_PointSize = 2.0;\n      }\n    `;\n    const fragment = `\n      precision mediump float;\n\n      varying vec3 vColor;\n\n      void main() {\n        float distance = length(gl_PointCoord - vec2(0.5));\n        if (distance > 0.5) discard;\n\n        float alpha = 1.0 - distance * 2.0;\n        gl_FragColor = vec4(vColor, alpha * 0.8);\n      }\n    `;\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      transparent: true\n    });\n    const mesh = new Mesh(gl, {\n      geometry,\n      program,\n      mode: gl.POINTS\n    });\n    mesh.setParent(scene);\n\n    // Animation loop\n    let time = 0;\n    function animate() {\n      time += 0.005;\n\n      // Rotate the galaxy\n      scene.rotation.y = time * 0.5;\n      scene.rotation.x = Math.sin(time * 0.2) * 0.1;\n      renderer.render({\n        scene,\n        camera\n      });\n      requestAnimationFrame(animate);\n    }\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.perspective({\n        aspect: window.innerWidth / window.innerHeight\n      });\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"galaxy-container\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"galaxy-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(Galaxy, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Galaxy;\nexport default Galaxy;\nvar _c;\n$RefreshReg$(_c, \"Galaxy\");","map":{"version":3,"names":["React","useEffect","useRef","Renderer","Camera","Transform","Geometry","Program","Mesh","Vec3","jsxDEV","_jsxDEV","Galaxy","_s","canvasRef","current","renderer","canvas","alpha","gl","camera","fov","scene","setSize","window","innerWidth","innerHeight","position","set","numParticles","positions","Float32Array","colors","i","i3","radius","Math","random","spinAngle","branchAngle","PI","angle","randomX","randomY","randomZ","cos","sin","mixedColor","innerColor","outerColor","lerp","x","y","z","geometry","size","data","color","vertex","fragment","program","transparent","mesh","mode","POINTS","setParent","time","animate","rotation","render","requestAnimationFrame","handleResize","perspective","aspect","addEventListener","removeEventListener","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/suhwan/Downloads/figadev/src/Galaxy.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Renderer, Camera, Transform, Geometry, Program, Mesh, Vec3 } from 'ogl';\nimport './Galaxy.css';\n\nconst Galaxy: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    const renderer = new Renderer({ canvas: canvasRef.current, alpha: true });\n    const gl = renderer.gl;\n    const camera = new Camera(gl, { fov: 35 });\n    const scene = new Transform();\n\n    // Set canvas size\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    camera.position.set(0, 0, 15);\n\n    const numParticles = 1000;\n    const positions = new Float32Array(numParticles * 3);\n    const colors = new Float32Array(numParticles * 3);\n\n    // Create galaxy spiral\n    for (let i = 0; i < numParticles; i++) {\n      const i3 = i * 3;\n\n      // Spiral galaxy pattern\n      const radius = Math.random() * 5;\n      const spinAngle = radius * 0.5;\n      const branchAngle = (i % 3) * ((Math.PI * 2) / 3);\n\n      const angle = branchAngle + spinAngle;\n      const randomX = (Math.random() - 0.5) * 0.5;\n      const randomY = (Math.random() - 0.5) * 0.5;\n      const randomZ = (Math.random() - 0.5) * 0.5;\n\n      positions[i3] = Math.cos(angle) * radius + randomX;\n      positions[i3 + 1] = randomY * 0.3;\n      positions[i3 + 2] = Math.sin(angle) * radius + randomZ;\n\n      // Colors - blue to purple gradient\n      const mixedColor = new Vec3();\n      const innerColor = new Vec3(0.2, 0.6, 1.0); // Blue\n      const outerColor = new Vec3(0.8, 0.3, 1.0); // Purple\n\n      mixedColor.lerp(innerColor, outerColor, radius / 5);\n\n      colors[i3] = mixedColor.x;\n      colors[i3 + 1] = mixedColor.y;\n      colors[i3 + 2] = mixedColor.z;\n    }\n\n    const geometry = new Geometry(gl, {\n      position: { size: 3, data: positions },\n      color: { size: 3, data: colors }\n    });\n\n    const vertex = `\n      attribute vec3 position;\n      attribute vec3 color;\n\n      uniform mat4 modelViewMatrix;\n      uniform mat4 projectionMatrix;\n\n      varying vec3 vColor;\n\n      void main() {\n        vColor = color;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        gl_PointSize = 2.0;\n      }\n    `;\n\n    const fragment = `\n      precision mediump float;\n\n      varying vec3 vColor;\n\n      void main() {\n        float distance = length(gl_PointCoord - vec2(0.5));\n        if (distance > 0.5) discard;\n\n        float alpha = 1.0 - distance * 2.0;\n        gl_FragColor = vec4(vColor, alpha * 0.8);\n      }\n    `;\n\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      transparent: true\n    });\n\n    const mesh = new Mesh(gl, { geometry, program, mode: gl.POINTS });\n    mesh.setParent(scene);\n\n    // Animation loop\n    let time = 0;\n    function animate() {\n      time += 0.005;\n\n      // Rotate the galaxy\n      scene.rotation.y = time * 0.5;\n      scene.rotation.x = Math.sin(time * 0.2) * 0.1;\n\n      renderer.render({ scene, camera });\n      requestAnimationFrame(animate);\n    }\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      camera.perspective({ aspect: window.innerWidth / window.innerHeight });\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return (\n    <div className=\"galaxy-container\">\n      <canvas ref={canvasRef} className=\"galaxy-canvas\" />\n    </div>\n  );\n};\n\nexport default Galaxy;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}