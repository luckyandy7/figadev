{"ast":null,"code":"var _jsxFileName = \"/Users/suhwan/Downloads/figadev/src/Galaxy.jsx\",\n  _s = $RefreshSig$();\nimport { Renderer, Program, Mesh, Color, Triangle } from 'ogl';\nimport { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexShader = `\nattribute vec2 uv;\nattribute vec2 position;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0, 1);\n}\n`;\nconst fragmentShader = `\nprecision highp float;\n\nuniform float uTime;\nuniform vec3 uResolution;\nuniform vec2 uFocal;\nuniform vec2 uRotation;\nuniform float uStarSpeed;\nuniform float uDensity;\nuniform float uHueShift;\nuniform float uSpeed;\nuniform vec2 uMouse;\nuniform float uGlowIntensity;\nuniform float uSaturation;\nuniform bool uMouseRepulsion;\nuniform float uTwinkleIntensity;\nuniform float uRotationSpeed;\nuniform float uRepulsionStrength;\nuniform float uMouseActiveFactor;\nuniform float uAutoCenterRepulsion;\nuniform bool uTransparent;\n\nvarying vec2 vUv;\n\n#define NUM_LAYER 4.0\n#define STAR_COLOR_CUTOFF 0.2\n#define MAT45 mat2(0.7071, -0.7071, 0.7071, 0.7071)\n#define PERIOD 3.0\n\nfloat Hash21(vec2 p) {\n  p = fract(p * vec2(123.34, 456.21));\n  p += dot(p, p + 45.32);\n  return fract(p.x * p.y);\n}\n\nfloat tri(float x) {\n  return abs(fract(x) * 2.0 - 1.0);\n}\n\nfloat tris(float x) {\n  float t = fract(x);\n  return 1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0));\n}\n\nfloat trisn(float x) {\n  float t = fract(x);\n  return 2.0 * (1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0))) - 1.0;\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat Star(vec2 uv, float flare) {\n  float d = length(uv);\n  float m = (0.05 * uGlowIntensity) / d;\n  float rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * flare * uGlowIntensity;\n  uv *= MAT45;\n  rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * 0.3 * flare * uGlowIntensity;\n  m *= smoothstep(1.0, 0.2, d);\n  return m;\n}\n\nvec3 StarLayer(vec2 uv) {\n  vec3 col = vec3(0.0);\n\n  vec2 gv = fract(uv) - 0.5;\n  vec2 id = floor(uv);\n\n  for (int y = -1; y <= 1; y++) {\n    for (int x = -1; x <= 1; x++) {\n      vec2 offset = vec2(float(x), float(y));\n      vec2 si = id + vec2(float(x), float(y));\n      float seed = Hash21(si);\n      float size = fract(seed * 345.32);\n      float glossLocal = tri(uStarSpeed / (PERIOD * seed + 1.0));\n      float flareSize = smoothstep(0.9, 1.0, size) * glossLocal;\n\n      float red = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 1.0)) + STAR_COLOR_CUTOFF;\n      float blu = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 3.0)) + STAR_COLOR_CUTOFF;\n      float grn = min(red, blu) * seed;\n      vec3 base = vec3(red, grn, blu);\n\n      float hue = atan(base.g - base.r, base.b - base.r) / (2.0 * 3.14159) + 0.5;\n      hue = fract(hue + uHueShift / 360.0);\n      float sat = length(base - vec3(dot(base, vec3(0.299, 0.587, 0.114)))) * uSaturation;\n      float val = max(max(base.r, base.g), base.b);\n      base = hsv2rgb(vec3(hue, sat, val));\n\n      vec2 pad = vec2(tris(seed * 34.0 + uTime * uSpeed / 10.0), tris(seed * 38.0 + uTime * uSpeed / 30.0)) - 0.5;\n\n      float star = Star(gv - offset - pad, flareSize);\n      vec3 color = base;\n\n      float twinkle = trisn(uTime * uSpeed + seed * 6.2831) * 0.5 + 1.0;\n      twinkle = mix(1.0, twinkle, uTwinkleIntensity);\n      star *= twinkle;\n\n      col += star * size * color;\n    }\n  }\n\n  return col;\n}\n\nvoid main() {\n  vec2 focalPx = uFocal * uResolution.xy;\n  vec2 uv = (vUv * uResolution.xy - focalPx) / uResolution.y;\n\n  vec2 mouseNorm = uMouse - vec2(0.5);\n\n  if (uAutoCenterRepulsion > 0.0) {\n    vec2 centerUV = vec2(0.0, 0.0);\n    float centerDist = length(uv - centerUV);\n    vec2 repulsion = normalize(uv - centerUV) * (uAutoCenterRepulsion / (centerDist + 0.1));\n    uv += repulsion * 0.05;\n  } else if (uMouseRepulsion) {\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\n    float mouseDist = length(uv - mousePosUV);\n    vec2 repulsion = normalize(uv - mousePosUV) * (uRepulsionStrength / (mouseDist + 0.1));\n    uv += repulsion * 0.05 * uMouseActiveFactor;\n  } else {\n    vec2 mouseOffset = mouseNorm * 0.1 * uMouseActiveFactor;\n    uv += mouseOffset;\n  }\n\n  float autoRotAngle = uTime * uRotationSpeed;\n  mat2 autoRot = mat2(cos(autoRotAngle), -sin(autoRotAngle), sin(autoRotAngle), cos(autoRotAngle));\n  uv = autoRot * uv;\n\n  uv = mat2(uRotation.x, -uRotation.y, uRotation.y, uRotation.x) * uv;\n\n  vec3 col = vec3(0.0);\n\n  for (float i = 0.0; i < 1.0; i += 1.0 / NUM_LAYER) {\n    float depth = fract(i + uStarSpeed * uSpeed);\n    float scale = mix(20.0 * uDensity, 0.5 * uDensity, depth);\n    float fade = depth * smoothstep(1.0, 0.9, depth);\n    col += StarLayer(uv * scale + i * 453.32) * fade;\n  }\n\n  if (uTransparent) {\n    float alpha = length(col);\n    alpha = smoothstep(0.0, 0.3, alpha);\n    alpha = min(alpha, 1.0);\n    gl_FragColor = vec4(col, alpha);\n  } else {\n    gl_FragColor = vec4(col, 1.0);\n  }\n}\n`;\nexport default function Galaxy({\n  focal = [0.5, 0.5],\n  rotation = [1.0, 0.0],\n  starSpeed = 0.5,\n  density = 1,\n  hueShift = 140,\n  disableAnimation = false,\n  speed = 1.0,\n  mouseInteraction = true,\n  glowIntensity = 0.3,\n  saturation = 0.0,\n  mouseRepulsion = true,\n  repulsionStrength = 2,\n  twinkleIntensity = 0.3,\n  rotationSpeed = 0.1,\n  autoCenterRepulsion = 0,\n  transparent = true,\n  ...rest\n}) {\n  _s();\n  const ctnDom = useRef(null);\n  const targetMousePos = useRef({\n    x: 0.5,\n    y: 0.5\n  });\n  const smoothMousePos = useRef({\n    x: 0.5,\n    y: 0.5\n  });\n  const targetMouseActive = useRef(0.0);\n  const smoothMouseActive = useRef(0.0);\n  useEffect(() => {\n    if (!ctnDom.current) return;\n    const ctn = ctnDom.current;\n    const renderer = new Renderer({\n      alpha: transparent,\n      premultipliedAlpha: false\n    });\n    const gl = renderer.gl;\n    if (transparent) {\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n      gl.clearColor(0, 0, 0, 0);\n    } else {\n      gl.clearColor(0, 0, 0, 1);\n    }\n    let program;\n    function resize() {\n      const scale = 1;\n      renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n      if (program) {\n        program.uniforms.uResolution.value = new Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height);\n      }\n    }\n    window.addEventListener('resize', resize, false);\n    resize();\n    const geometry = new Triangle(gl);\n    program = new Program(gl, {\n      vertex: vertexShader,\n      fragment: fragmentShader,\n      uniforms: {\n        uTime: {\n          value: 0\n        },\n        uResolution: {\n          value: new Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height)\n        },\n        uFocal: {\n          value: new Float32Array(focal)\n        },\n        uRotation: {\n          value: new Float32Array(rotation)\n        },\n        uStarSpeed: {\n          value: starSpeed\n        },\n        uDensity: {\n          value: density\n        },\n        uHueShift: {\n          value: hueShift\n        },\n        uSpeed: {\n          value: speed\n        },\n        uMouse: {\n          value: new Float32Array([smoothMousePos.current.x, smoothMousePos.current.y])\n        },\n        uGlowIntensity: {\n          value: glowIntensity\n        },\n        uSaturation: {\n          value: saturation\n        },\n        uMouseRepulsion: {\n          value: mouseRepulsion\n        },\n        uTwinkleIntensity: {\n          value: twinkleIntensity\n        },\n        uRotationSpeed: {\n          value: rotationSpeed\n        },\n        uRepulsionStrength: {\n          value: repulsionStrength\n        },\n        uMouseActiveFactor: {\n          value: 0.0\n        },\n        uAutoCenterRepulsion: {\n          value: autoCenterRepulsion\n        },\n        uTransparent: {\n          value: transparent\n        }\n      }\n    });\n    const mesh = new Mesh(gl, {\n      geometry,\n      program\n    });\n    let animateId;\n    function update(t) {\n      animateId = requestAnimationFrame(update);\n      if (!disableAnimation) {\n        program.uniforms.uTime.value = t * 0.001;\n        program.uniforms.uStarSpeed.value = t * 0.001 * starSpeed / 10.0;\n      }\n      const lerpFactor = 0.05;\n      smoothMousePos.current.x += (targetMousePos.current.x - smoothMousePos.current.x) * lerpFactor;\n      smoothMousePos.current.y += (targetMousePos.current.y - smoothMousePos.current.y) * lerpFactor;\n      smoothMouseActive.current += (targetMouseActive.current - smoothMouseActive.current) * lerpFactor;\n      program.uniforms.uMouse.value[0] = smoothMousePos.current.x;\n      program.uniforms.uMouse.value[1] = smoothMousePos.current.y;\n      program.uniforms.uMouseActiveFactor.value = smoothMouseActive.current;\n      renderer.render({\n        scene: mesh\n      });\n    }\n    animateId = requestAnimationFrame(update);\n    ctn.appendChild(gl.canvas);\n    function handleMouseMove(e) {\n      const rect = ctn.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\n      targetMousePos.current = {\n        x,\n        y\n      };\n      targetMouseActive.current = 1.0;\n    }\n    function handleMouseLeave() {\n      targetMouseActive.current = 0.0;\n    }\n    if (mouseInteraction) {\n      ctn.addEventListener('mousemove', handleMouseMove);\n      ctn.addEventListener('mouseleave', handleMouseLeave);\n    }\n    return () => {\n      var _gl$getExtension;\n      cancelAnimationFrame(animateId);\n      window.removeEventListener('resize', resize);\n      if (mouseInteraction) {\n        ctn.removeEventListener('mousemove', handleMouseMove);\n        ctn.removeEventListener('mouseleave', handleMouseLeave);\n      }\n      ctn.removeChild(gl.canvas);\n      (_gl$getExtension = gl.getExtension('WEBGL_lose_context')) === null || _gl$getExtension === void 0 ? void 0 : _gl$getExtension.loseContext();\n    };\n  }, [focal, rotation, starSpeed, density, hueShift, disableAnimation, speed, mouseInteraction, glowIntensity, saturation, mouseRepulsion, twinkleIntensity, rotationSpeed, repulsionStrength, autoCenterRepulsion, transparent]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ctnDom,\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 10\n  }, this);\n}\n_s(Galaxy, \"3hfPn9KsixpKjSh0FStiZteKbyU=\");\n_c = Galaxy;\nvar _c;\n$RefreshReg$(_c, \"Galaxy\");","map":{"version":3,"names":["Renderer","Program","Mesh","Color","Triangle","useEffect","useRef","jsxDEV","_jsxDEV","vertexShader","fragmentShader","Galaxy","focal","rotation","starSpeed","density","hueShift","disableAnimation","speed","mouseInteraction","glowIntensity","saturation","mouseRepulsion","repulsionStrength","twinkleIntensity","rotationSpeed","autoCenterRepulsion","transparent","rest","_s","ctnDom","targetMousePos","x","y","smoothMousePos","targetMouseActive","smoothMouseActive","current","ctn","renderer","alpha","premultipliedAlpha","gl","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","clearColor","program","resize","scale","setSize","offsetWidth","offsetHeight","uniforms","uResolution","value","canvas","width","height","window","addEventListener","geometry","vertex","fragment","uTime","uFocal","Float32Array","uRotation","uStarSpeed","uDensity","uHueShift","uSpeed","uMouse","uGlowIntensity","uSaturation","uMouseRepulsion","uTwinkleIntensity","uRotationSpeed","uRepulsionStrength","uMouseActiveFactor","uAutoCenterRepulsion","uTransparent","mesh","animateId","update","t","requestAnimationFrame","lerpFactor","render","scene","appendChild","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseLeave","_gl$getExtension","cancelAnimationFrame","removeEventListener","removeChild","getExtension","loseContext","ref","style","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/suhwan/Downloads/figadev/src/Galaxy.jsx"],"sourcesContent":["import { Renderer, Program, Mesh, Color, Triangle } from 'ogl';\nimport { useEffect, useRef } from 'react';\n\nconst vertexShader = `\nattribute vec2 uv;\nattribute vec2 position;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0, 1);\n}\n`;\n\nconst fragmentShader = `\nprecision highp float;\n\nuniform float uTime;\nuniform vec3 uResolution;\nuniform vec2 uFocal;\nuniform vec2 uRotation;\nuniform float uStarSpeed;\nuniform float uDensity;\nuniform float uHueShift;\nuniform float uSpeed;\nuniform vec2 uMouse;\nuniform float uGlowIntensity;\nuniform float uSaturation;\nuniform bool uMouseRepulsion;\nuniform float uTwinkleIntensity;\nuniform float uRotationSpeed;\nuniform float uRepulsionStrength;\nuniform float uMouseActiveFactor;\nuniform float uAutoCenterRepulsion;\nuniform bool uTransparent;\n\nvarying vec2 vUv;\n\n#define NUM_LAYER 4.0\n#define STAR_COLOR_CUTOFF 0.2\n#define MAT45 mat2(0.7071, -0.7071, 0.7071, 0.7071)\n#define PERIOD 3.0\n\nfloat Hash21(vec2 p) {\n  p = fract(p * vec2(123.34, 456.21));\n  p += dot(p, p + 45.32);\n  return fract(p.x * p.y);\n}\n\nfloat tri(float x) {\n  return abs(fract(x) * 2.0 - 1.0);\n}\n\nfloat tris(float x) {\n  float t = fract(x);\n  return 1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0));\n}\n\nfloat trisn(float x) {\n  float t = fract(x);\n  return 2.0 * (1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0))) - 1.0;\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat Star(vec2 uv, float flare) {\n  float d = length(uv);\n  float m = (0.05 * uGlowIntensity) / d;\n  float rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * flare * uGlowIntensity;\n  uv *= MAT45;\n  rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * 0.3 * flare * uGlowIntensity;\n  m *= smoothstep(1.0, 0.2, d);\n  return m;\n}\n\nvec3 StarLayer(vec2 uv) {\n  vec3 col = vec3(0.0);\n\n  vec2 gv = fract(uv) - 0.5;\n  vec2 id = floor(uv);\n\n  for (int y = -1; y <= 1; y++) {\n    for (int x = -1; x <= 1; x++) {\n      vec2 offset = vec2(float(x), float(y));\n      vec2 si = id + vec2(float(x), float(y));\n      float seed = Hash21(si);\n      float size = fract(seed * 345.32);\n      float glossLocal = tri(uStarSpeed / (PERIOD * seed + 1.0));\n      float flareSize = smoothstep(0.9, 1.0, size) * glossLocal;\n\n      float red = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 1.0)) + STAR_COLOR_CUTOFF;\n      float blu = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 3.0)) + STAR_COLOR_CUTOFF;\n      float grn = min(red, blu) * seed;\n      vec3 base = vec3(red, grn, blu);\n\n      float hue = atan(base.g - base.r, base.b - base.r) / (2.0 * 3.14159) + 0.5;\n      hue = fract(hue + uHueShift / 360.0);\n      float sat = length(base - vec3(dot(base, vec3(0.299, 0.587, 0.114)))) * uSaturation;\n      float val = max(max(base.r, base.g), base.b);\n      base = hsv2rgb(vec3(hue, sat, val));\n\n      vec2 pad = vec2(tris(seed * 34.0 + uTime * uSpeed / 10.0), tris(seed * 38.0 + uTime * uSpeed / 30.0)) - 0.5;\n\n      float star = Star(gv - offset - pad, flareSize);\n      vec3 color = base;\n\n      float twinkle = trisn(uTime * uSpeed + seed * 6.2831) * 0.5 + 1.0;\n      twinkle = mix(1.0, twinkle, uTwinkleIntensity);\n      star *= twinkle;\n\n      col += star * size * color;\n    }\n  }\n\n  return col;\n}\n\nvoid main() {\n  vec2 focalPx = uFocal * uResolution.xy;\n  vec2 uv = (vUv * uResolution.xy - focalPx) / uResolution.y;\n\n  vec2 mouseNorm = uMouse - vec2(0.5);\n\n  if (uAutoCenterRepulsion > 0.0) {\n    vec2 centerUV = vec2(0.0, 0.0);\n    float centerDist = length(uv - centerUV);\n    vec2 repulsion = normalize(uv - centerUV) * (uAutoCenterRepulsion / (centerDist + 0.1));\n    uv += repulsion * 0.05;\n  } else if (uMouseRepulsion) {\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\n    float mouseDist = length(uv - mousePosUV);\n    vec2 repulsion = normalize(uv - mousePosUV) * (uRepulsionStrength / (mouseDist + 0.1));\n    uv += repulsion * 0.05 * uMouseActiveFactor;\n  } else {\n    vec2 mouseOffset = mouseNorm * 0.1 * uMouseActiveFactor;\n    uv += mouseOffset;\n  }\n\n  float autoRotAngle = uTime * uRotationSpeed;\n  mat2 autoRot = mat2(cos(autoRotAngle), -sin(autoRotAngle), sin(autoRotAngle), cos(autoRotAngle));\n  uv = autoRot * uv;\n\n  uv = mat2(uRotation.x, -uRotation.y, uRotation.y, uRotation.x) * uv;\n\n  vec3 col = vec3(0.0);\n\n  for (float i = 0.0; i < 1.0; i += 1.0 / NUM_LAYER) {\n    float depth = fract(i + uStarSpeed * uSpeed);\n    float scale = mix(20.0 * uDensity, 0.5 * uDensity, depth);\n    float fade = depth * smoothstep(1.0, 0.9, depth);\n    col += StarLayer(uv * scale + i * 453.32) * fade;\n  }\n\n  if (uTransparent) {\n    float alpha = length(col);\n    alpha = smoothstep(0.0, 0.3, alpha);\n    alpha = min(alpha, 1.0);\n    gl_FragColor = vec4(col, alpha);\n  } else {\n    gl_FragColor = vec4(col, 1.0);\n  }\n}\n`;\n\nexport default function Galaxy({\n  focal = [0.5, 0.5],\n  rotation = [1.0, 0.0],\n  starSpeed = 0.5,\n  density = 1,\n  hueShift = 140,\n  disableAnimation = false,\n  speed = 1.0,\n  mouseInteraction = true,\n  glowIntensity = 0.3,\n  saturation = 0.0,\n  mouseRepulsion = true,\n  repulsionStrength = 2,\n  twinkleIntensity = 0.3,\n  rotationSpeed = 0.1,\n  autoCenterRepulsion = 0,\n  transparent = true,\n  ...rest\n}) {\n  const ctnDom = useRef(null);\n  const targetMousePos = useRef({ x: 0.5, y: 0.5 });\n  const smoothMousePos = useRef({ x: 0.5, y: 0.5 });\n  const targetMouseActive = useRef(0.0);\n  const smoothMouseActive = useRef(0.0);\n\n  useEffect(() => {\n    if (!ctnDom.current) return;\n    const ctn = ctnDom.current;\n    const renderer = new Renderer({\n      alpha: transparent,\n      premultipliedAlpha: false\n    });\n    const gl = renderer.gl;\n\n    if (transparent) {\n      gl.enable(gl.BLEND);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n      gl.clearColor(0, 0, 0, 0);\n    } else {\n      gl.clearColor(0, 0, 0, 1);\n    }\n\n    let program;\n\n    function resize() {\n      const scale = 1;\n      renderer.setSize(ctn.offsetWidth * scale, ctn.offsetHeight * scale);\n      if (program) {\n        program.uniforms.uResolution.value = new Color(\n          gl.canvas.width,\n          gl.canvas.height,\n          gl.canvas.width / gl.canvas.height\n        );\n      }\n    }\n    window.addEventListener('resize', resize, false);\n    resize();\n\n    const geometry = new Triangle(gl);\n    program = new Program(gl, {\n      vertex: vertexShader,\n      fragment: fragmentShader,\n      uniforms: {\n        uTime: { value: 0 },\n        uResolution: {\n          value: new Color(gl.canvas.width, gl.canvas.height, gl.canvas.width / gl.canvas.height)\n        },\n        uFocal: { value: new Float32Array(focal) },\n        uRotation: { value: new Float32Array(rotation) },\n        uStarSpeed: { value: starSpeed },\n        uDensity: { value: density },\n        uHueShift: { value: hueShift },\n        uSpeed: { value: speed },\n        uMouse: {\n          value: new Float32Array([smoothMousePos.current.x, smoothMousePos.current.y])\n        },\n        uGlowIntensity: { value: glowIntensity },\n        uSaturation: { value: saturation },\n        uMouseRepulsion: { value: mouseRepulsion },\n        uTwinkleIntensity: { value: twinkleIntensity },\n        uRotationSpeed: { value: rotationSpeed },\n        uRepulsionStrength: { value: repulsionStrength },\n        uMouseActiveFactor: { value: 0.0 },\n        uAutoCenterRepulsion: { value: autoCenterRepulsion },\n        uTransparent: { value: transparent }\n      }\n    });\n\n    const mesh = new Mesh(gl, { geometry, program });\n    let animateId;\n\n    function update(t) {\n      animateId = requestAnimationFrame(update);\n      if (!disableAnimation) {\n        program.uniforms.uTime.value = t * 0.001;\n        program.uniforms.uStarSpeed.value = (t * 0.001 * starSpeed) / 10.0;\n      }\n\n      const lerpFactor = 0.05;\n      smoothMousePos.current.x += (targetMousePos.current.x - smoothMousePos.current.x) * lerpFactor;\n      smoothMousePos.current.y += (targetMousePos.current.y - smoothMousePos.current.y) * lerpFactor;\n\n      smoothMouseActive.current += (targetMouseActive.current - smoothMouseActive.current) * lerpFactor;\n\n      program.uniforms.uMouse.value[0] = smoothMousePos.current.x;\n      program.uniforms.uMouse.value[1] = smoothMousePos.current.y;\n      program.uniforms.uMouseActiveFactor.value = smoothMouseActive.current;\n\n      renderer.render({ scene: mesh });\n    }\n    animateId = requestAnimationFrame(update);\n    ctn.appendChild(gl.canvas);\n\n    function handleMouseMove(e) {\n      const rect = ctn.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\n      targetMousePos.current = { x, y };\n      targetMouseActive.current = 1.0;\n    }\n\n    function handleMouseLeave() {\n      targetMouseActive.current = 0.0;\n    }\n\n    if (mouseInteraction) {\n      ctn.addEventListener('mousemove', handleMouseMove);\n      ctn.addEventListener('mouseleave', handleMouseLeave);\n    }\n\n    return () => {\n      cancelAnimationFrame(animateId);\n      window.removeEventListener('resize', resize);\n      if (mouseInteraction) {\n        ctn.removeEventListener('mousemove', handleMouseMove);\n        ctn.removeEventListener('mouseleave', handleMouseLeave);\n      }\n      ctn.removeChild(gl.canvas);\n      gl.getExtension('WEBGL_lose_context')?.loseContext();\n    };\n  }, [\n    focal,\n    rotation,\n    starSpeed,\n    density,\n    hueShift,\n    disableAnimation,\n    speed,\n    mouseInteraction,\n    glowIntensity,\n    saturation,\n    mouseRepulsion,\n    twinkleIntensity,\n    rotationSpeed,\n    repulsionStrength,\n    autoCenterRepulsion,\n    transparent\n  ]);\n\n  return <div ref={ctnDom} style={{ width: '100%', height: '100%', position: 'relative' }} {...rest} />;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}